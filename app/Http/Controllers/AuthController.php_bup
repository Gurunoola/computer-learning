<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\URL;
use Illuminate\Auth\Notifications\VerifyEmail;
use Carbon\Carbon;

class AuthController extends Controller
{
    /**
     * Register a new user (Pending status until email is verified)
     */
    public function register(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:6|confirmed',
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
            'status' => 'pending',
            'email_verified_at' => null,
        ]);

        // Generate OTP
        $otp = rand(100000, 999999); // 6-digit OTP
        $user->otp_code = $otp;
        $user->otp_expires_at = Carbon::now()->addMinutes(10); // OTP valid for 10 mins
        $user->save();

        // Send OTP via email
        Mail::send('emails.otp', ['otp' => $otp], function ($message) use ($user) {
            $message->to($user->email);
            $message->subject('Your Email Verification OTP');
        });

        return response()->json(['message' => 'Registration successful. OTP sent to email.']);
    }

    /**
     * Email verification
     */
    public function verifyEmail($token)
    {
        $user = User::where('email_verification_token', $token)->first();

        if (!$user) {
            return response()->json(['message' => 'Invalid verification token.'], 400);
        }

        // Update user status and email verification
        $user->email_verified_at = now();
        $user->email_verification_token = null;
        $user->status = 'active'; // Now user can access services
        $user->save();

        return response()->json(['message' => 'Email verified successfully. You can now access services.']);
    }

    public function verifyOtp(Request $request)
{
    $request->validate([
        'email' => 'required|email',
        'otp' => 'required|numeric',
    ]);

    $user = User::where('email', $request->email)
                ->where('otp_code', $request->otp)
                ->where('otp_expires_at', '>=', Carbon::now())
                ->first();

    if (!$user) {
        return response()->json(['message' => 'Invalid or expired OTP.'], 400);
    }

    // Mark email as verified
    $user->email_verified_at = now();
    $user->status = 'active';
    $user->otp_code = null; // Clear OTP
    $user->otp_expires_at = null;
    $user->save();

    return response()->json(['message' => 'Email verified successfully.']);
}


    /**
     * Process Payment (Dummy Implementation)
     */
    public function processPayment(Request $request)
    {
        $user = Auth::user();

        if (!$user || $user->status !== 'active') {
            return response()->json(['message' => 'Unauthorized or unverified account'], 403);
        }

        // In a real implementation, integrate with Razorpay/Stripe/PayPal
        $paymentSuccess = true; // Dummy check

        if ($paymentSuccess) {
            return response()->json(['message' => 'Payment successful. You can now access premium features.']);
        } else {
            return response()->json(['message' => 'Payment failed. Try again.'], 400);
        }
    }

    /**
     * Login User
     */
    // public function login(Request $request)
    // {
    //     $credentials = $request->only('email', 'password');

    //     if (Auth::attempt($credentials)) {
    //         $user = Auth::user();

    //         if ($user->status !== 'active') {
    //             return response()->json(['message' => 'Please verify your email first.'], 403);
    //         }

    //         $token = $user->createToken('auth_token')->plainTextToken;

    //         return response()->json(['token' => $token, 'message' => 'Login successful.']);
    //     }

    //     return response()->json(['message' => 'Invalid credentials.'], 401);
    // }

    public function login(Request $request)
    {
        $request->validated($request->only(['email', 'password']));

        if(!Auth::attempt($request->only(['email', 'password']))) {
            return $this->error('', 'Credentials do not match', 401);
        }

        $user = User::where('email', $request->email)->first();

        return $this->success([
            'user' => $user,
            'token' => $user->createToken('API Token')->plainTextToken
        ]);
    }

    /**
     * Logout User
     */
    public function logout()
    {
        Auth::user()->tokens()->delete();

        return response()->json(['message' => 'Logged out successfully.']);
    }
}
